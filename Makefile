# ============================================================================
# Microcontroller interface to the DHT11 temperature and humidity sensor.
#
# Makefile
#
# Created On: 2021/01/29
#
# Copyright (C) 2021  Aaron Lucas
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# aaronlucas98@gmail.com
# https://github.com/aaron-lucas
# ============================================================================

# This Makefile was modified from the default prototype generated by AVR
# CrossPack's 'avr-project' command.
#
# This project is currently designed for use on an ATtiny85 microcontroller
# using a usbasp programmer. To use a different AVR and/or programmer, change
# the DEVICE/PROGRAMMER variables to their appropriate values.

DEVICE     = attiny85
PROGRAMMER = usbasp

CLOCK      = 16000000
FUSES      = -U lfuse:w:0xf1:m -U hfuse:w:0xdf:m -U efuse:w:0xff:m

# -----------------------------------------------------------------------------
# Project Files and Directories
# -----------------------------------------------------------------------------

SRC	= src
OBJ = obj
BIN = bin

SOURCES   	:= $(wildcard $(SRC)/*.c)
OBJECTS	  	:= $(patsubst $(SRC)/%.c,$(OBJ)/%.o,$(SOURCES))
DEPENDS   	:= $(patsubst $(SRC)/%.c,$(OBJ)/%.d,$(SOURCES))

# -----------------------------------------------------------------------------
# Commands and Make Settings
# -----------------------------------------------------------------------------

AVRDUDE = avrdude -c $(PROGRAMMER) -p $(DEVICE)
CFLAGS  = -Wall -Werror -Wextra -O2 -MMD -MP -DF_CPU=$(CLOCK) -mmcu=$(DEVICE) -fshort-enums

.PHONY: all clean

-include $(DEPENDS)

# -----------------------------------------------------------------------------
# Default Rule - compile program
# -----------------------------------------------------------------------------

all: main

# -----------------------------------------------------------------------------
# Generate Object Files
# -----------------------------------------------------------------------------

$(OBJ)/%.o: $(SRC)/%.c Makefile | obj
	avr-gcc $(CFLAGS) -c $< -o $@

# -----------------------------------------------------------------------------
# Generate Executables
# -----------------------------------------------------------------------------

$(BIN)/main.elf: $(OBJECTS) | bin
	avr-gcc $(CFLAGS) -o $(BIN)/main.elf $(OBJECTS)

main: $(BIN)/main.elf | bin
	rm -f $(BIN)/main.hex
	avr-objcopy -j .text -j .data -O ihex $(BIN)/main.elf $(BIN)/main.hex
	avr-size --format=avr --mcu=$(DEVICE) $(BIN)/main.elf

# -----------------------------------------------------------------------------
# AVR Rules
# -----------------------------------------------------------------------------

# Flash hex file to AVR
flash:	all | bin
	$(AVRDUDE) -U flash:w:$(BIN)/main.hex:i

# Set AVR fuse bits
fuse:
	$(AVRDUDE) $(FUSES)

# Flash and set fuse bit of the AVR with one command
install: flash fuse

# -----------------------------------------------------------------------------
# Debugging Rules (when ICSP is always connected)
# -----------------------------------------------------------------------------

debug: CFLAGS += -DDEBUG -fstack-usage
debug: all

test: debug install

# -----------------------------------------------------------------------------
# Generate Missing Directories
# -----------------------------------------------------------------------------

obj:
	mkdir -p $@

bin:
	mkdir -p $@

# -----------------------------------------------------------------------------
# Clean project
# -----------------------------------------------------------------------------

clean:
	rm -rf $(BIN) $(OBJ)
